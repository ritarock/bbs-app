// Code generated by mockery v2.29.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "ritarock/bbs-app/domain"

	mock "github.com/stretchr/testify/mock"
)

// PostUsecase is an autogenerated mock type for the PostUsecase type
type PostUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, post
func (_m *PostUsecase) Create(ctx context.Context, post *domain.Post) error {
	ret := _m.Called(ctx, post)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Post) error); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *PostUsecase) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *PostUsecase) GetAll(ctx context.Context) ([]domain.Post, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Post, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Post); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *PostUsecase) GetById(ctx context.Context, id int) (domain.Post, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.Post, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.Post); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, post
func (_m *PostUsecase) Update(ctx context.Context, post *domain.Post) error {
	ret := _m.Called(ctx, post)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Post) error); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPostUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewPostUsecase creates a new instance of PostUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostUsecase(t mockConstructorTestingTNewPostUsecase) *PostUsecase {
	mock := &PostUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
